https://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/description/

Input: n = 5, ranges = [3,4,1,1,0,0]
Output: 1
Explanation: The tap at point 0 can cover the interval [-3,3]
The tap at point 1 can cover the interval [-3,5]
The tap at point 2 can cover the interval [1,3]
The tap at point 3 can cover the interval [2,4]
The tap at point 4 can cover the interval [4,4]
The tap at point 5 can cover the interval [5,5]
Opening Only the second tap will water the whole garden [0,5]


//Slight modification of jump game-II
class Solution {
    public int minTaps(int n, int[] ranges) {
        int arr[] = new int[n+1];
        Arrays.fill(arr, 0);

        //for every tap update it's right side range at left index
        for(int i = 0; i <= n; i++){
            int left = Math.max(0, i-ranges[i]);
            arr[left] = Math.max(arr[left], i+ranges[i]);
        }
        
        //update maximum range that can be covered starting from index i, by taking max of previous values. 
        for(int i = 1; i <= n; i++){
            arr[i] = Math.max(arr[i], arr[i-1]);
            if(i < n && arr[i] <= i) return -1;
        }

        //Now simply jump like jump game and find the answer.
        int ans = 0, ind = 0;
        while(ind < n){
            ans++;
            ind = arr[ind];
        }
        return ans;
    }
}
