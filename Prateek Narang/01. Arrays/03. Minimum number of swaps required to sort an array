https://www.geeksforgeeks.org/minimum-number-swaps-required-sort-array/

Given an array of N distinct elements, find the minimum number of swaps required to sort the array.
Input: {4, 3, 2, 1}
Output: 2
Explanation: Swap index 0 with 3 and 1 with 2 to form the sorted array {1, 2, 3, 4}

// C++
class Solution 
{
    public:
    //Function to find the minimum number of swaps required to sort the array. 
	int minSwaps(vector<int>&nums)
	{
	    // Code here
	    int n = nums.size();
	    //actual positions
	    vector<pair<int,int>> ap(n);
	    
	    for(int i = 0; i < n ;i++){
	        ap[i].first = nums[i];
	        ap[i].second = i;
	    }
	    sort(ap.begin(), ap.end());
	    
	    int swaps = 0;
	    vector<bool> visited(n, false);
	    
	    for(int i = 0; i < n; i++){
	        int old_position = ap[i].second;
	        if(visited[i] || old_position == i){
	            continue;
	        }
	        
	        int cycle = 0;
	        int node = i;
	        while(!visited[node]){
	            cycle++;
	            visited[node] = true;
	            int next_node = ap[node].second;
	            node = next_node;
	        }
	        
	        swaps += (cycle - 1);
	    }
	    return swaps;
	}
};
